{"version":3,"sources":["images/hp-background.jpg","images/green-background.jpg","images/wood-background.jpeg","images/picnic-background.jpg","components/Homepage.js","components/Cards.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","props","setName","e","setState","name","target","value","setBackground","backgrounud","state","id","onChange","this","placeholder","disable","selected","to","onClick","setPlayer","Component","Cards","className","Game","deal","counter","playerCard","playerCards","compCard","compCards","shuffle","player","App","background","pokerTable","woodenTable","picnicTable","createDeck","temp","x","y","push","num","type","deck","shuffled","shuffleDeck","length","a","Math","floor","random","b","temp1","splice","temp2","homeImage","style","backgroundImage","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d8838a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hp-background.1d7d81d8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/green-background.ee6c2c75.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wood-background.ea44f6c3.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/picnic-background.f226fd9c.jpg\";","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom';\n\n\nexport default class Homepage extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            name:\"\",\n            backgrounud:\"\"\n             \n        }\n    }\n    setName=(e)=>[\n        this.setState({name:e.target.value})\n    ]\n    setBackground=(e)=>{\n        this.setState({backgrounud:e.target.value})\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 id=\"hp-title\">Ready for WAR</h1>\n                <div id=\"hp-input-div\">\n                    <input onChange={this.setName} placeholder=\"Enter your name\" id=\"hp-input\"/>\n                    <select onChange={this.setBackground} id=\"backgroundSelect\">\n                        <option disable selected>Select background</option>\n                        <option value=\"poker\">Poker table</option>\n                        <option value=\"wood\">Wooden table</option>\n                        <option value=\"picnic\">Picnic table</option>\n                        \n                    </select>\n                    <Link to=\"/game\"><button id=\"hp-btn\" onClick={()=>{this.props.setPlayer(this.state.name, this.state.backgrounud)}}>Start</button></Link>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default function Cards(props) {\n\n    return (\n        <div id=\"cards-div\">\n            <div className='card'>\n                {/* <div className=\"card-top\">\n                    <h4>{props.player.num}</h4>\n                    <h6>{props.player.type}</h6>\n                </div>\n                <div className=\"card-mid\">\n                    <h1>{props.pType}</h1>\n                </div>\n                <div className=\"card-btm\">\n                    <h4>{props.pNum}</h4>\n                    <h6>{props.pType}</h6>\n                </div> */}\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Cards from './Cards.js';\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            counter:1,\n            playerCard:this.props.playerCards[0],\n            compCard:this.props.compCards[0]\n        }\n    }\n    deal=()=>{\n       this.setState({counter:this.state.counter+1})\n       this.setState({playerCard:this.props.playerCards[this.state.counter]})\n       this.setState({compCard:this.props.compCards[this.state.counter]})\n    }\n\n    \n    render() {\n        return (\n            <div>\n                <button onClick={this.props.shuffle}>Deal</button>\n                <h1 id=\"compName\">Computer</h1>\n                <div ><Cards player={this.state.playerCard}/></div>\n                <button id=\"nextBtn\" onClick={()=>{this.deal()}}>Next</button>\n                <h1 id=\"playerName\">{this.props.name}</h1>\n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './App.css';\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport Homepage from './components/Homepage.js';\nimport Game from './components/Game.js';\nimport homeImage from './images/hp-background.jpg';\nimport pokerTable from './images/green-background.jpg';\nimport woodenTable from './images/wood-background.jpeg';\nimport picnicTable from './images/picnic-background.jpg';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      player:'',\n      background:`url(${homeImage})`,\n      deck:[],\n      playerCards:[],\n      compCards:[],\n      shuffled:[]\n    }\n  }\n \n\n  setPlayer=(name, background)=>{\n    // setting player's name and chosen background\n    this.setState({player:name})\n    if(background===\"poker\"){\n      this.setState({background:`url(${pokerTable})`})\n    }\n    else if(background===\"wood\"){\n      this.setState({background:`url(${woodenTable})`})\n    }\n    else if(background===\"picnic\"){\n      this.setState({background:`url(${picnicTable})`})\n    }\n    this.createDeck()\n  }\n\n  createDeck=()=>{\n    // creating a deck\n    let temp=[]\n    for(let x=1; x<14; x++){\n      for(let y=1; y<5; y++){\n        temp.push({num:x, type:y})\n      }\n    }\n    // saving temp into both \"deck\" and \"shuffled\" to shuffle and divide only \"shuffled\" and keep \"deck\" as an original - does not work though\n    this.setState({deck:temp})\n    this.setState({shuffled:temp})\n    // this.shuffleDeck(temp);\n    \n  }\n\n  shuffleDeck=()=>{\n    // shuffling the deck\n    let shuffled=this.state.shuffled;\n    // must use .length-1 (rather than .length) b/c then shuffled[x] wont exist in the first loop\n    for(let x=shuffled.length-1; x>0; x--){\n      // randomly selecting a position within the array of the deck\n      let a=Math.floor(Math.random()*(x+1));\n      let b=shuffled[a];\n      // swapping the randomly selected element with the last element in the array\n      shuffled[a]=shuffled[x];\n      shuffled[x]=b;\n    }\n    // dividing the shuffled deck in two\n    var temp1=shuffled.splice(26, 26)\n    var temp2=shuffled.splice(0,26)\n    this.setState({playerCards:temp1})\n    this.setState({compCards:temp2})\n    // Or, another way to divide:\n    // this.setState({playerCards:shuffled.splice(26, 26)})\n    // this.setState({compCards:shuffled.splice(0,26)})\n\n    // saving the shuffled deck into state\n    this.setState({shuffled:shuffled})\n  }\n  \n  \n  \n  render() {\n    return (\n      <div id =\"body\" style={{backgroundImage:this.state.background}}>\n        <Router>\n          <Switch>\n            <Route exact path='/' component={()=>{return <Homepage setPlayer={this.setPlayer}/>}}/>\n            <Route exact path='/game' component={()=>{return <Game shuffle={this.shuffleDeck} name={this.state.player} playerCards={this.state.playerCards} compCards={this.state.compCards}/>}}/>\n          </Switch>\n        </Router>\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}